// Arrays = coleccion de datos

[1, 2, 3, 4, 5];

// Los elementos de un array pueden ser de cualquier tipo, incluso otros arrays:
[1, 2, 3, 4, 5, [1, 2, 3]];

// Y, aunque no siempre sea recomendable, puedes mezclar tipos de datos dentro:
['uno', 2, true, null, undefined];

const numbers = [1, 2, 3, 4, 5];
let names = ["Ivan", "Agustin", "Pugliese"];

// Acceder a los elementos de un array:

numbers[0] // 1
numbers[2] // 3

names[1] // Agustin

// Si intentamos acceder a un elemento que no existe, nos devolvera undefined.

// Tambien podemos usar variables para acceder a los elementos de un array:

let position = 2;
numbers[position] // 3

// Modificar elementos de un array:

numbers[0] = 10
numbers[2] = 30

console.log(numbers) // [10, 2, 30, 4, 5]

// ¬øC√≥mo es que pese a que hemos indicado que es una constante const podemos modificar el Array? Aunque hay una explicaci√≥n mucho m√°s larga, que veremos m√°s adelante, la respuesta corta es que const s√≥lo impide que se reasigne el valor de la variable, no que se modifique el valor en s√≠.


// Los arrays de JavaScript tienen una serie de m√©todos y propiedades que nos permiten trabajar con ellos de forma sencilla.
// Un m√©todo es una funci√≥n que se ejecuta sobre un objeto. Una propiedad es una variable que pertenece a un objeto. En este caso, el objeto es un array.

// propiedad length : conocer la longitud de una coleccion de elementos
const frutas = ["manzana", "pera", "platano", "fresa"];
console.log(frutas.length) // 4

// tambien puedo cortar su longitud con dicha propiedad de la siguiente manera: 
frutas.length = 2;

console.log(frutas) // ["manzana", "pera"]
console.log(frutas.length) // 2


// Metodos de arrays:

// Cuando trabajamos con colecciones de elementos, vamos a querer hacer cosas con ellos. Por ejemplo: a√±adir un elemento, eliminarlo, buscarlo, etc. Para ello, los arrays tienen una serie de m√©todos que nos permiten hacer estas operaciones:

// .PUSH() : nos permite a√±adir un elemento al final de un array:
frutas.push("naranja")
console.log(frutas) // ["manzana", "pera", "platano", "fresa", "naranja"]

// .POP(): nos permite eliminar y devolver el ultimo elemento de un array:
const ultimaFruta = frutas.pop()

console.log(frutas) // ["manzana", "pera", "platano", "fresa"]
console.log(ultimaFruta) // "naranja"

// .SHIFT(): eliminar y devuelve el primer elemento de un array:
const primeraFruta = frutas.shift()

console.log(frutas) // ["pera", "platano", "fresa"]
console.log(primeraFruta) // "manzana"

// .UNSHIFT(): a√±adir un elemento al principio del array:
frutas.unshift("manzana")

console.log(frutas) // ["manzana", "pera", "platano", "fresa"]


// CONCATENAR ARRAYS:

// con el metodo CONCAT():
const numbers1 = [1, 2, 3];
const numbers2 = [4, 5];

const allNumbers = numbers1.concat(numbers2);
console.log(allNumbers) // [1, 2, 3, 4, 5]

// con el SPREAD operator: propaga los elementos de un array
const allNumbersSpread = [...numbers1, ...numbers2];
console.log(allNumbersSpread) // [1, 2, 3, 4, 5]


// RECORRER ARRAYS:

// con while: Podemos crear una variable con let para guardar un puntero al √≠ndice del elemento que estamos iterando. En cada iteraci√≥n, podemos incrementar el valor de la variable en 1, para que en la siguiente iteraci√≥n se imprima el siguiente elemento.
let i = 0;

while (i < frutas.length) {
  console.log(frutas[i]); // imprime el elemento en la posici√≥n i
  i++;
}

// con for: 
for (let i = 0; i < frutas.length; i++) {
  console.log(frutas[i]) // imprime el elemento en la posici√≥n i
}

// tambien se puede recorrer el array en el orden inverso:
for (let i = frutas.length - 1; i >= 0; i--) {
  console.log(frutas[i]); // imprime el elemento en la posici√≥n i
}


// con for of: Adem√°s de while y for, existe otra estructura de control que nos permite iterar sobre los elementos de un array: for...of. Esta estructura de control es m√°s simple que for, ya que no necesitamos crear una variable para guardar el √≠ndice del elemento que estamos iterando.

for (const fruta of frutas) {
  console.log(fruta); // imprime el elemento en la posici√≥n i
}

// Como ves, hay algunas limitaciones en el uso de for...of. Por ejemplo, no podemos usarlo para recorrer un array en orden inverso y tampoco tenemos acceso al √≠ndice del elemento que estamos iterando.


// metodo FOREACH(): Ya hemos visto en la clase anterior que los arrays tienen m√©todos que nos permiten realizar operaciones sobre ellos, como a√±adir elementos o eliminarlos. Pero tiene muchos m√°s m√©todos que iremos viendo que nos ayuda a trabajar con ellos.

// Uno de esos m√©todos es array.forEach(), que nos permite ejecutar una function para cada uno de los elementos del array. Esta funci√≥n recibe como par√°metros el elemento que se est√° iterando en ese momento, el √≠ndice del elemento y el propio array.

frutas.forEach(function (fruta, index, originalArray) {
  console.log("index: " + index);
  console.log(fruta); // imprime el elemento en la posici√≥n i
})

// con arrow function:
frutas.forEach((fruta) => {
  console.log(fruta); // imprime el elemento en la posici√≥n i
})

// Algo importante es que array.forEach() no devuelve nada, por lo que no podemos asignar el resultado a una variable.


/* 

M√âTODO	ACCESO AL √çNDICE	ACCESO AL VALOR	PUEDE USAR BREAK	CONTROL MANUAL DEL √çNDICE
for	‚úÖ	‚úÖ	‚úÖ	‚úÖ
while	‚úÖ	‚úÖ	‚úÖ	‚úÖ
for...of	‚ùå	‚úÖ	‚úÖ	‚ùå
forEach	‚úÖ	‚úÖ	‚ùå*	‚ùå

Aunque t√©cnicamente no puedes utilizar la sentencia break para salir de forEach, puedes simular esto lanzando una excepci√≥n y captur√°ndola en un bloque try/catch externo. Obviamente es una mala pr√°ctica que no te recomiendo.
Cada uno de estos m√©todos tiene sus propios casos de uso. for y while son m√°s generales y te permiten controlar el √≠ndice manualmente, lo que es √∫til si necesitas saltar a √≠ndices espec√≠ficos, cambiar el orden de iteraci√≥n o salir del bucle antes de que se complete.

for...of es m√°s f√°cil de usar cuando solo necesitas los valores de un array y no te importa el √≠ndice. Es especialmente √∫til tambi√©n cuando est√°s trabajando con iterables que no son arrays, como las cadenas de caracteres o los conjuntos (sets).

Finalmente, forEach es una forma muy eficiente y legible de iterar sobre un array si no necesitas break y si no necesitas controlar manualmente el √≠ndice.

*/


// BUSQUEDAS DE ARRAYS :

// indexOf : permite encontrar la posicion de un elemento dentro del array, si el elemento no existe, devuelve -1
const emojis = ['‚ú®', 'ü•ë', 'üòç']

const posicionCorazon = emojis.indexOf('üòç')
console.log(posicionCorazon) // 2


// includes: determina si un array incluye un determinado elemento, devolviendo true o false segun corresponda:
const tieneCorazon = emojis.includes('üòç')
console.log(tieneCorazon) // -> true
// El m√©todo .includes() tambi√©n funciona con las cadenas de texto. Puedes utilizarlo para buscar una subcadena dentro de una cadena de texto: 'Hola mundo'.includes('Hola') // -> true


// some: te permite verificar si al menos uno de los elementos del array cumple con una condicion.
// Para utilizarlo, le pasas una funci√≥n como argumento. Esta funci√≥n recibe como argumento cada uno de los elementos del Array y debe retornar un valor booleano.
//Si al menos uno de los elementos retorna true, entonces el m√©todo some retorna true. Si ninguno de los elementos retorna true, entonces el m√©todo some retorna false.
const tieneCorazon2 = emojis.some(emoji => emoji === 'üòç');
console.log(tieneCorazon2) // -> true
// Podemos crear funciones m√°s complejas para pasarle al m√©todo some. Por ejemplo, podemos crear una funci√≥n que verifique si un Array contiene un elemento que sea un string de m√°s de 3 caracteres:
const names2 = ['Leo', 'Isa', '√çan', 'Lea']

const tieneNombreLargo = names2.some(name => name.length > 3);
console.log(tieneNombreLargo) // false

// Algo importante a tener en cuenta es que el m√©todo some deja de iterar sobre el Array en cuanto encuentra un elemento que cumple con la condici√≥n. Por ejemplo, si tenemos un Array de 10 elementos y el elemento n√∫mero 3 cumple con la condici√≥n, el m√©todo some no va a iterar sobre los 7 elementos restantes:
const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

const tieneNumeroMayorA5 = numbers.some(number => {
  console.log(`Estoy iterando sobre el numero ${number}`);
  return number > 5;
})

console.log(tieneNumeroMayorA5) // true


// every: El m√©todo every te permite verificar si todos los elementos de un Array cumplen con una condici√≥n. Es similar a some, pero en lugar de verificar si al menos uno de los elementos cumple con la condici√≥n, los verifica todos.
// Si todos los elementos retornan true, entonces el m√©todo every retorna true. Si al menos uno de los elementos retorna false, entonces el m√©todo every retorna false.

const emojis2 = ['üòÄ', 'üòÇ', 'üòç', 'üò≠', 'ü•∫', 'üòé']

const todosSonFelices = emojis2.every(emoji => emoji === 'üòÄ')
console.log(todosSonFelices) // -> false

// ¬øTodos los n√∫meros son pares?
const numbers = [2, 4, 7, 10, 12]
const todosSonPares = numbers.every(number => number % 2 === 0)
console.log(todosSonPares) // -> false

// ¬øTodos los strings son mayores a 3 caracteres?
const names3 = ['Miguel', 'Juan', 'Itziar', 'Isabel']
const todosLosNombresSonLargos = names.every(name => name.length > 3)
console.log(todosLosNombresSonLargos) // -> true



// find:  permite encontrar el primer elemento que cumple con una condici√≥n. Lo interesante es que este m√©todo te devuelve el elemento en s√≠, no un valor booleano como some y every. Aunque el funcionamiento es igual: hay que pasarle una funci√≥n como argumento que retorne un valor booleano.
const numbers = [13, 27, 44, -10, 81];

const firstNegativeNumber = numbers.find(number => number < 0);
console.log(firstNegativeNumber) // -> -10

// Si no encuentra ning√∫n elemento que cumpla con la condici√≥n, el m√©todo find retorna undefined.

const numbers = [13, 27, 44, 81]
// encuentra el primer n√∫mero negativo
const firstNegativeNumber2 = numbers.find(number => number < 0)
console.log(firstNegativeNumber) // -> undefined


// findIndex: es similar a find, pero en lugar de devolver el elemento que cumple con la condici√≥n, devuelve el √≠ndice de ese elemento.
const numbers = [13, 27, 44, -10, 81]

const firstNegativeNumberIndex = numbers.findIndex(number => number < 0);
console.log(firstNegativeNumberIndex) // -> 3

// ahora puedes usar el √≠ndice para acceder al elemento
console.log(numbers[firstNegativeNumberIndex]) // -> -10

// Si no encuentra ning√∫n elemento que cumpla con la condici√≥n, el m√©todo findIndex retorna -1.
const numbers = [13, 27, 44, 81]

// encuentra el √≠ndice del primer n√∫mero negativo
const firstNegativeNumberIndex2 = numbers.findIndex(number => number < 0)
console.log(firstNegativeNumberIndex) // -> -1



// Ordenamiento de arrays: JavaScript proporciona un m√©todo incorporado en arrays llamado .sort() para ordenar sus elementos. Por defecto no es muy √∫til pero puedes personalizar su comportamiento para que ordene los elementos de la manera que necesites.

// Por defecto, .sort() hace una ordenaci√≥n un poco extra√±a:
let numeros = [5, 10, 2, 25, 7]
numeros.sort()
console.log(numeros) // [10, 2, 25, 5, 7]
// ¬øQu√© ha pasado? Este comportamiento puede resultar confuso cuando se trabaja con n√∫meros, ya que .sort() ordenar√° los n√∫meros en funci√≥n de su valor como cadena de texto, no de su valor num√©rico.

/* 

Para personalizar c√≥mo sort() ordena los elementos, puedes pasar una funci√≥n de comparaci√≥n como argumento. La funci√≥n de comparaci√≥n debe devolver:

Un valor negativo si el primer argumento debe aparecer antes que el segundo.
Un valor positivo si el segundo argumento debe aparecer antes que el primero.
Cero si ambos argumentos son iguales.

*/

// de menor a mayor:
numeros.sort(function (a, b) {
  return a - b;
})

console.log(numeros) // [2, 5, 7, 10, 25]

// de forma simplificada:
numeros.sort((a, b) => a - b);

// de mayor a menor:
numeros.sort(function (a, b) {
  return a + b;
})

console.log(numeros) // [2, 5, 7, 10, 25]

// de forma simplificada:
numeros.sort((a, b) => a + b);

// Como ves, .sort() modifica el array original. Si quieres obtener un array ordenado sin modificar el original, puedes usar el m√©todo .toSorted(). S√≥lo ten en cuenta que, ahora mismo, su soporte en navegadores es limitado .
let numerosOrdenados = numeros.toSorted((a, b) => {
  return a - b
})

console.log(numerosOrdenados) // [2, 5, 7, 10, 25]
console.log(numeros) // [5, 10, 2, 25, 7]

// Tambi√©n podr√≠as usar el operador de propagaci√≥n (...) para crear una copia del array original y ordenarla:
const copiaNumeros = [...numeros];
copiaNumeros.sort((a, b) => a - b);


// Transformacion de arrays:

// filter(): El m√©todo filter crea un nuevo array con todos los elementos que devuelven true al ejecutar una funci√≥n que le pasamos como par√°metro.

// Por ejemplo, podr√≠amos filtrar en un nuevo array todos los n√∫meros pares de un array de n√∫meros:

const numbers = [1, 2, 3, 4, 5, 6, 7]

const evenNumbers = numbers.filter(function (number) {
  return number % 2 === 0;
});

console.log(evenNumbers); // [2,4,6];

// O quedarnos con todas las cadenas de texto que tengan la letra a:

const strings = ['hola', 'adi√≥s', 'casa', 'coche', 'perro', 'gato']

const stringsWithA = strings.filter(function (string) {
  return string.includes("a");
})

console.log(stringsWithA) // ['hola', 'adi√≥s', 'casa', 'gato']



// map(): El m√©todo map crea un nuevo array de la misma longitud que el original, pero con los elementos transformados por una funci√≥n que le pasamos como par√°metro. As√≠ que la funci√≥n recibir√° cada elemento del array y tendremos que devolver el elemento transformado.

// Por ejemplo, podr√≠amos crear un array con el doble de cada n√∫mero de un array de n√∫meros:

const numbers = [1, 2, 3]

const doubleNumbers = numbers.map((number) => number * 2);
console.log(doubleNumbers) // [2, 4, 6]

// O podr√≠amos crear un array con la longitud de cada cadena de texto de un array de cadenas:

const strings2 = ['hola', 'javascript', 'midu', 'programaci√≥n']

const stringLong = strings2.map((string) => string.length);
console.log(stringLong);



// map + filter: Un nuevo Array con los elementos transformados y filtrados
// En JavaScript podemos crear un encadenamiento de m√©todos. De esta forma, si un m√©todo devuelve un array, podemos llamar a otro m√©todo sobre ese array sin necesidad de guardarlo en una variable.
// Imagina que queremos crear un array con el doble de los n√∫meros y s√≥lo quedarnos con los que sean mayores que 5. Podr√≠amos hacerlo as√≠:

const numbers = [1, 2, 3, 4, 5, 6, 7]

const doubleNumbersAndGreaterThanFive = numbers
  .map((number) => number * 2)
  .filter((number) => number > 5);

console.log(doubleNumbersAndGreaterThanFive); // [6, 8, 10, 12, 14]

// Tambi√©n podr√≠amos hacerlo al rev√©s, primero filtrando y luego transformando. Por ejemplo, filtrar los n√∫meros pares y luego multiplicarlos por 2:

const doubleEvenNumbers = numbers
  .filter((number) => number % 2 === 0)
  .map((number) => number * 2);

console.log(doubleEvenNumbers); // [4, 8, 12]



// reduce(): El m√©todo reduce es un poco m√°s complejo que los anteriores. Este m√©todo te permite crear un √∫nico valor a partir de un Array.

/* 

Recibe 2 parametros: una funcion y un valor inicial.

La funci√≥n recibe tres par√°metros:

El acumulador: el valor que se va a ir acumulando en cada iteraci√≥n
El elemento actual: el elemento del Array que estamos iterando en ese momento.
El √≠ndice: la posici√≥n del elemento actual en el Array.
Y debe devolver el valor que se va a acumular en cada iteraci√≥n.

*/

// Un caso de uso muy t√≠pico de reduce es sumar todos los elementos de un Array:

const numbers = [1, 2, 3]

const sum = numbers.reduce((acumulador, currentNumber) => {
  return acumulador + currentNumber;
}, 0) // <- el 0 es el valor inicial

console.log(sum) // 6

/* 

Vamos a ver qu√© est√° pasando en cada iteraci√≥n:

Iteraci√≥n 1: el acumulador vale 0 (ya que 0 es el valor inicial) y el elemento actual vale 1. As√≠ que devolvemos 0 + 1 = 1
Iteraci√≥n 2: el acumulador vale 1 (el valor que devolvimos en la iteraci√≥n anterior) y el elemento actual vale 2. As√≠ que devolvemos 1 + 2 = 3
Iteraci√≥n 3: el acumulador vale 3 (el valor que devolvimos en la iteraci√≥n anterior) y el elemento actual vale 3. As√≠ que devolvemos 3 + 3 = 6

*/


// ¬øRecuerdas que hemos visto antes c√≥mo usar map y filter juntos? Pues podr√≠as usar reduce para tener que evitar crear un array intermedio. Por ejemplo, imagina que queremos doblar los n√∫meros pares y s√≥lo quedarnos con los mayores de 5 (como hicimos en el ejemplo anterior):

const numbers = [1, 2, 3, 4, 5, 6, 7]

const doubleEvenNumbers2 = numbers.reduce((acumualdor, number) => {
  const doubled = number * 2
  const isEven = doubled % 2 === 0
  const isGreaterThanFive = doubled> 5;

  // si es par y mayor que 5 lo a√±adimos al array
  if (isEven && isGreaterThanFive) {
    // para ello devolvemos un nuevo array con el valor actual
    return acumualdor.concat(doubled);
  } else {
    // si no, devolvemos lo que ya teniamos
    return acumualdor
  }
}, []) // el array vacio es el valor inicial

console.log(doubleEvenNumbers2) // [6, 8, 10, 12, 14]

// Lo interesante en este caso es que no hemos tenido que crear un array intermedio con map y filter. Hemos ido acumulando los valores que nos interesaban en cada iteraci√≥n y los que no nos interesaban los hemos descartado devolviendo lo que ya ten√≠amos en el acumulador.


// Matrices: array de arrays

// Matriz de 2 x 3:

const matriz = [
  [1, 2, 3],
  [4, 5, 6]
]

// acceso a los elementos de una matriz:
let numero = matriz[1][2] // 6

// iteracion sobre matrices: podemos utilizar bucles anidados
for (let i = 0; i < matriz.length; i++) { // {1}
  for (let j = 0; j < matriz[i].length; j++) { // {2}
    console.log(matriz[i][j]);
  }
}
// En este ejemplo, el bucle externo recorre {1} cada fila de la matriz, mientras que el bucle interno {2} recorre cada elemento dentro de una fila espec√≠fica.

// tambien se puede con forEach:
matriz.forEach((fila,filaIndex) => {
  fila.forEach((columna,columnaIndex) => {
    console.log("Fila" + filaIndex)
    console.log("Columna" + columnaIndex)
    console.log("columna" + columna)
  })
})


// Ejemplo practico de matrices: juego de 3 en raya o tateti
const tablero = [
  ["X", "O", "X"],
  ["O", "X", "O"],
  ["0", "O", "X"]
]

// Verificar las lineas horizontales:
for (let i = 0; i < tablero.length; i++) {
  if (
    tablero[i][0] === tablero[i][1] &&
    tablero[i][1] === tablero[i][2]
  ) {
    console.log("El ganador es " + tablero[i][0]);
  }
}

// Verificar las lineas verticales:
for (let i = 0; i < tablero.length; i++) {
  if (
    tablero[0][i] === tablero[1][i] &&
    tablero[1][i] === tablero[2][i]
  ) {
    console.log("El ganador es " + tablero[0][i]);
  }
}

// Verificar la diagonal de arriba izquierda a derecha abajo
if (
  tablero[0][0] === tablero[1][1] &&
  tablero[1][1] === tablero[2][2]
) {
  console.log("El ganador es " + tablero[0][0]);
}

// Verificar la diagonal de derecha arriba a izquiera abajo
if (
  tablero[0][2] === tablero[1][1] &&
  tablero[1][1] === tablero[2][0]
) {
  console.log("El ganador es " + tablero[0][2]); // El ganador es X
}


// Ejercicio: 
const matrix = [
  ['HTML', 'CSS', 'JavaScript'],
  ['Java', 'C++', 'Python'],
  ['Ruby', 'Go', 'Swift']
]

function findJavaScript(matrix) {
  for(let i = 0; i < matrix.length; i++) {
    for(let j = 0; j < matrix[i].length; j++) {
      if(matrix[i][j] === "JavaScript") {
        return [i,j]
      }
    }
  }
  return [-1,-1]
}

findJavaScript(matrix)


// Algoritmos con arrays

// Algoritmo para encontrar el numero mayor:
function findMaxAlgorithm(array) {
  let max = array[0] // recuperamos el primer elemento del array

  // recorremos el array desde el segundo elemento
  for (let i = 1; i < array.length; i++) {
    // ¬ø Es el elemento actual mayor que el maximo?
    if (array[i] > max) {
      max = array[i]; // si es asi, lo guardamos como nuevo maximo
    }
  }

  return max;
}
// En JavaScript podr√≠amos usar el m√©todo Math.max para encontrar el n√∫mero mayor de un array. Se usar√≠a as√≠: Math.max(...array). Pero por motivos did√°cticos, hemos creado nuestro propio algoritmo. Siempre que puedas, te recomiendo usar Math.max en su lugar.


// Busqueda binaria:

let numbers = [11, 18, 23, 25, 48, 55, 88, 111, 120];

function findNumber(array, number) {
  for (let i = 0; i < array.length; i++) {
    if (array[i] === number) {
      return true
    }
  }
  return false;
}

findNumber(numbers, 55);
// Obviamente, podr√≠amos usar el m√©todo .includes() para comprobar si un array contiene un elemento. Pero por motivos did√°cticos, hemos creado nuestro propio algoritmo. Siempre que puedas, te recomiendo usar .includes() en su lugar.


// Implementacion de la busqueda binaria: La idea de la b√∫squeda binaria es ir dividiendo el array en dos mitades. Si el elemento que estamos buscando es mayor que el elemento de la mitad del array, tenemos que buscar en la mitad derecha. Si el elemento que estamos buscando es menor que el elemento de la mitad del array, tenemos que buscar en la mitad izquierda. Y as√≠ sucesivamente hasta encontrar el elemento que estamos buscando.

function busquedaBinaria(array, elemento) {
  let index = 0; // primer elemento del array
  let final = array.length - 1 // ultimo elemento del array a buscar

  // mientras el indice sea menor o igual que el final seguiremos buscando
  while (index <= final) {
    // calculamos la mitad del array
    // como puede ser impar, usamos Math.floor para redondear hacia abajo
    const mitad = Math.floor((index + final) / 2);

    // si el elemento de la mitad es igual al elemento que estamos buscando encontes encontramos el elemento
    if (array[mitad] === elemento) {
      return mitad
    } else if (array[mitad] < elemento) {
      // si el elemento de la mitad es menor que el elemento que estamos buscando entonces tenemos que buscar en la mitad derecha
      index = mitad + 1
    } else {
      // si el elemento de la mitad es mayor que el elemento que estamos buscando entonces tenemos que buscar en la mitad izquierda
      final = mitad - 1
    }
  }

  // si llegamos hasta aqui, es que no hemos encontrado el elemento y devolvemos -1
  return -1
}

// En JavaScript podr√≠amos usar el m√©todo Array.prototype.indexOf para encontrar el √≠ndice de un elemento en un array. Se usar√≠a as√≠: array.indexOf(elemento). Pero por motivos did√°cticos, hemos creado nuestro propio algoritmo. Siempre que puedas, te recomiendo usar Array.prototype.indexOf en su lugar.



// Otro ejercicio:
let numbers = [999,255,121];

function minAndMaxWord(words) {
  let minIndex = 0
  let maxIndex = 0
  for(let i = 1; i < words.length; i++) {
    if(words[i] < words[minIndex]) {
      minIndex = i
    }
    if(words[i] > words[maxIndex]) {
      maxIndex = i
    }
  }
  return [minIndex,maxIndex]
}

minAndMaxWord(numbers)